# -*- coding: utf-8 -*-
# ejercicios-02-ipppd.py
# Introducción a la Programación con Python y los Paradigmas de Datos

# Práctica 2: Introducción a Python
# =================================


# -----------
# EJERCICIO 1
# -----------


# Definir una función medias_matriz(m),que recibiendo una matriz m
# (representada como se ha indicado) cuyos elementos son números, devuelve una
# tupla con tres valores: 

# * La lista de las medias de las columnas de la matriz 
# * La lista de las medias columnas de la matriz
# * La media de todos los números de la matriz

# Por ejemplo:

# >>> medias_matriz([[1,2,5,2],[3,1,7,2],[2,1,6,1]])
# ([2.0, 1.3333333333333333, 6.0, 1.6666666666666667], [2.5, 3.25, 2.5], 2.75)

def medias_matriz(m):
    n_filas=len(m)#me a a dar 3 (de tres vectores que tiene la matriz)
    n_cols=len(m[0])#me va a dar 4(cada vector tiene cuatro componentes)
    media=0 #este será el valor de la media total de todos los números de la m
    medias_filas=[0]*n_filas#esto es para que la lista de que se cree con las medias de las filas tengo el mismo número de elementos que componentes hay en las filas
    medias_columnas=[0]*n_cols
    total_elementos=n_filas*n_cols#para que me cuente el total de elementos que tiene mi matriz
    for i in range(n_filas):
        for j in range(n_cols):
            x=m[i][j] #reccoge el valor de cada elemento ij de la matriz en una variable x
            media+=x/total_elementos#esto me esta dando a media total de la matriz(sumando todos los aij y dividiendolos entre el total de elementos)
            medias_filas[i]+=x/n_cols#me da el vector resultante de la media de las filas
            medias_columnas[j]+=x/n_filas#me da el vector resultante de la media de las columnas

    return medias_filas,medias_columnas,media        

    





# -----------
# EJERCICIO 2
# -----------


# Definir una función producto_matrices(a,b), tal que recibiendo dos matrices
# a y b (representadas como listas de listas, tal y como se explica en el
# ejercicio anterior), devuelve la matriz resultante de multiplicar a y b
# matricialmente. Supondremos que el número de columnas de a es el mismo que
# el número de filas de b. 


# Por ejemplo:

# >>> a=[[3,1,4,5],[2,0,3,5],[1,1,4,1]]
# >>> b=[[1,2],[2,8],[4,3],[3,1]]
# >>> producto_matrices(a,b)
# [[36, 31], [29, 18], [22, 23]]

def producto_matrices(a,b):
    n_filas=len(a)
    n_columnas=len(b[0])
    filas=[0]*n_columnas  #[0,0]
    matriz=[]           #partimos de una matriz vacía

    for x in a:
        matriz.append(filas) #me añade a la matriz tantos [0,0] como filas tenga la matriz a#hasta aquí hemos creado la matri vacia

    for i in range(len(a)):
        for j in range(len(a[i])):
            for k in range(len(b[0])):
                matriz[i][k]+=a[i][j]+b[j][k]
    return matriz



            


# -----------
# EJERCICIO 3
# -----------
# Definir una función vocales_consonantes(s), que reciba una cadena de
# caracteres s (de letras mayúsculas) y escribe por pantalla, una a una, si
# sus letras son vocales o  consonantes.
# Ejemplo:
# >>> vocales_consonantes("INTELIGENCIA")
# I es vocal
# N es consonante
# T es consonante
# E es vocal
# L es consonante
# I es vocal
# G es consonante
# E es vocal
# N es consonante
# C es consonante
# I es vocal
# A es vocal
# ---------------------------------------------------------------------------








# -----------
# EJERCICIO 4
# -----------
#
# 
# Definir una función oculta_palabras(s) que reciba una cadena de caracteres
# (de letras minúsculas y posiblemente espacios) y devuelva la cadena de
# caracteres resultante de doblar cada consonante colocando una "o" enmedio y
# dejar el resto de caracteres igual
#
# Ejemplo:
# >>> oculta_palabras("inteligencia")
# 'inontoteloligogenoncocia'
# ---------------------------------------------------------------------------





##def oculta_palabras(s):
##    
##
##    res=""#tenemos que construir una cadena,lo mejor es empezar por una cadena vacia
##    for c in s: #para cada caracter que haya en la cadena s vamos iterando
##        if c not in "aeiou ": #si el caracter no es una vocal o un espacio
##            coc=c+"o"+c #al caracter añademe una o + el mismo caracter
##        else: #sino
##            coc=c #deja el caracter tal como esta
##        res+=coc #concatename res con coc (con la variación que hemos hecho)
##    return res
##
##def oculta_palabras(s):
##    return "".join([(c if c in "aeiou " else c+"o"+c) for c in s])






# -----------
# EJERCICIO 5
# -----------
#
# 
# Definir, sin usar "slicing", una función es_palíndromo(s) que reconoce si
# una cadena s es un palíndromo o no (es decir que se lee igual de izquierda a
# dercha que de derecha a izquierda). Para simplificar, supondremos que no hay
# espacios y que todas las letras son minúsculas y sin tilde. 

# Ejemplos:
# >>> es_palíndromo("reconocer")
# True
# >>> es_palíndromo("inteligencia")
# False
# >>> es_palíndromo("sometemos")
# True
# ---------------------------------------------------------------------------









# -----------
# EJERCICIO 6
# -----------
#
# 
# Definir una función dibuja_caja(n) que recibiendo como entrada dos números
# naturales n y m, dibuja, usando el caracter "*", los lados de un rectángulo
# n x m 
# Ejemplo:

# >>> dibuja_caja(10,6)
# **********
# *        *
# *        *
# *        *
# *        *
# **********
# -----------------------------------------------------------------------









    


# -----------
# EJERCICIO 7
# -----------
#
# 
# Antiguamente, cuando las impresoras eran matriciales y se compartían en un
# centro de trabajo, era normal que cada trabajo de impresión llevara una
# portada con dígitos de gran tamaño que indicaba el número del trabajo de
# impresión. Estos dígitos estaban dibujados mediante algún carácter simple. 

# Por ejemplo, lo que sigue es el número 0123456789 dibujado con asteriscos:

#   ***    *   ***   ***     *   *****  ***  *****  ***   ****  
#  *   *  **  *   * *   *   **   *     *         * *   * *   *
# *     *  *  *  *      *  * *   *     *        *  *   * *   *
# *     *  *    *     **  *  *    ***  ****    *    ***   ****
# *     *  *   *        * ******     * *   *  *    *   *     *
#  *   *   *  *     *   *    *   *   * *   * *     *   *     *
#   ***   *** *****  ***     *    ***   ***  *      ***      *

# Definir una función dígitos_grandes(x) que recibiendo un número entero
# positivo, lo escriba por pantalla usando dígitos grandes. Por ejemplo:


# >>> dígitos_grandes(8)
#   *** 
#  *   *
#  *   *
#   *** 
#  *   *
#  *   *
#   *** 
# >>> dígitos_grandes(4)
#     *  
#    **  
#   * *  
#  *  *  
#  ******
#     *  
#     *  

# INDICACIÓN:

# Puede ser de utilidad tener definidas las siguientes listas, que almacenan
# las distintas líneas que sirven para dibujar cada dígito grande:
 
##cero = ["  ***  ", 
##        " *   * ", 
##        "*     *", 
##        "*     *", 
##        "*     *", 
##        " *   * ", 
##        "  ***  "]
##
##uno = [" * ", 
##       "** ", 
##       " * ", 
##       " * ", 
##       " * ", 
##       " * ", 
##       "***"]
##
##dos = [" *** ", 
##       "*   *", 
##       "*  * ", 
##       "  *  ", 
##       " *   ", 
##       "*    ", 
##       "*****"]
##
##tres = [" *** ", 
##        "*   *", 
##        "    *", 
##        "  ** ", 
##        "    *", 
##        "*   *", 
##        " *** "]
##
##cuatro = ["   *  ", 
##          "  **  ", 
##          " * *  ", 
##          "*  *  ", 
##          "******", 
##          "   *  ", 
##          "   *  "]
##
##cinco = ["*****", 
##         "*    ", 
##         "*    ", 
##         " *** ", 
##         "    *", 
##         "*   *", 
##         " *** "]
##
##seis = [" *** ", 
##        "*    ", 
##        "*    ", 
##        "**** ", 
##        "*   *", 
##        "*   *", 
##        " *** "]
##
##siete = ["*****", 
##         "    *", 
##         "   * ", 
##         "  *  ", 
##         " *   ", 
##         "*    ", 
##         "*    "]
##
##ocho = [" *** ", 
##        "*   *", 
##        "*   *", 
##        " *** ", 
##        "*   *", 
##        "*   *", 
##        " *** "]
##
##nueve = [" ****", 
##         "*   *", 
##         "*   *", 
##         " ****", 
##         "    *", 
##         "    *", 
##         "    *"]
##

# ---------------------------------------------------------------------------

def dígitos_grandes(n):
    
    cero = ["  ***  ", 
            " *   * ", 
            "*     *", 
            "*     *", 
            "*     *", 
            " *   * ", 
            "  ***  "]

    uno = [" * ", 
           "** ", 
           " * ", 
           " * ", 
           " * ", 
           " * ", 
           "***"]

    dos = [" *** ", 
           "*   *", 
           "*  * ", 
           "  *  ", 
           " *   ", 
           "*    ", 
           "*****"]

    tres = [" *** ", 
            "*   *", 
            "    *", 
            "  ** ", 
            "    *", 
            "*   *", 
            " *** "]

    cuatro = ["   *  ", 
              "  **  ", 
              " * *  ", 
              "*  *  ", 
              "******", 
              "   *  ", 
              "   *  "]

    cinco = ["*****", 
             "*    ", 
             "*    ", 
             " *** ", 
             "    *", 
             "*   *", 
             " *** "]

    seis = [" *** ", 
            "*    ", 
            "*    ", 
            "**** ", 
            "*   *", 
            "*   *", 
            " *** "]

    siete = ["*****", 
             "    *", 
             "   * ", 
             "  *  ", 
             " *   ", 
             "*    ", 
             "*    "]

    ocho = [" *** ", 
            "*   *", 
            "*   *", 
            " *** ", 
            "*   *", 
            "*   *", 
            " *** "]

    nueve = [" ****", 
             "*   *", 
             "*   *", 
             " ****", 
             "    *", 
             "    *", 
             "    *"]


    diccionario={0:cero,1:uno,2:dos,3:tres,4:cuatro,5:cinco,6:seis,7:siete,8:ocho,9:nueve}

    num=diccionario[n]#para acceder a los elementos de un diccionario

    for x in num:
        print(x)





# -----------
# EJERCICIO 8
# -----------
#
# 
# Definir una función aspa(a,c) que recibiendo un número natural a (impar y
# mayor que 2) y una cadena de caracteres c (de longitud 1), dibuja por
# pantalla una cruz en forma de aspa construida con el carácter dado c, con
# una altura de a líneas. Definir la función de manera que el primer argumento
# se pueda dar con la clave "caracter" y el segundo argumento sea "o" por
# defecto.

# Ejemplos:

# >>> aspa(7)
# o     o
#  o   o
#   o o
#    o
#   o o
#  o   o
# o     o
# >>> aspa(21,caracter="x")
# x                   x
#  x                 x
#   x               x
#    x             x
#     x           x
#      x         x
#       x       x
#        x     x
#         x   x
#          x x
#           x
#          x x
#         x   x
#        x     x
#       x       x
#      x         x
#     x           x
#    x             x
#   x               x
#  x                 x
# x                   x
# -------------------------------------------------------------------------------











# -----------
# EJERCICIO 9
# -----------
#
# Supongamos que recibimos un diccionario cuyas claves son cadenas de
# caracteres de longitud uno y los valores asociados son números enteros 
# entre 0 y 50. 
# Definir una función histograma_horizontal(d), que recibiendo un diccionario 
# de ese tipo, escribe un histograma de barras horizontales asociado, 
# como se ilustra en el siguiente ejemplo:  

# >>> d1={"a":5,"b":10,"c":12,"d":11,"e":15,"f":20,
#         "g":15,"h":9,"i":7,"j":2}
# >>> histograma_horizontal(d1)
# a: *****
# b: **********
# c: ************
# d: ***********
# e: ***************
# f: ********************
# g: ***************
# h: *********
# i: *******
# j: **
#
# Nota: imprimir las barras, de arriba a abajo, en el orden que determina la
#         función "sorted" sobre las claves 
# ---------------------------------------------------------------------------



def histograma_horizontal(d1):
    orden=sorted(d1)
    for clav in orden:
        ast="*"*d1[clav]
        print (clav,ast)
        







# ------------
# EJERCICIO 10
# ------------
# Con la misma entrada que el ejercicio anterior, definir una función
# histograma_vertical(d) que imprime el mismo histograma pero con las barras
# en vertical. 

# Ejemplo:

# >>> d2={"a":5,"b":7,"c":9,"d":12,"e":15,"f":20,
#         "g":15,"h":9,"i":7,"j":2}
# >>> histograma_vertical(d2)
#           *         
#           *         
#           *         
#           *         
#           *         
#         * * *       
#         * * *       
#         * * *       
#       * * * *       
#       * * * *       
#       * * * *       
#     * * * * * *     
#     * * * * * *     
#   * * * * * * * *   
#   * * * * * * * *   
# * * * * * * * * *   
# * * * * * * * * *   
# * * * * * * * * *   
# * * * * * * * * * * 
# * * * * * * * * * * 
# a b c d e f g h i j

# Nota: imprimir las barras, de izquierda a derecha, en el orden que determina la
#         función "sorted" sobre las claves 
# ---------------------------------------------------------------------------


def histograma_vertical(d):
    orden = sorted(d)

    maxi = float("-inf")
    for i in orden:
        if d[i]>maxi:
            maxi = d[i]
            max_clave = i
    
    nuevo_maxi = maxi
    for i in range(maxi):
        cadena = ""
        for item in orden:
            if d[item] < nuevo_maxi:
                cadena+=" "
            else:
                cadena+="*"
            cadena+=" "
        print(cadena)
        nuevo_maxi-=1
    cadena = ""
    for i in orden:
        cadena+=i
        cadena+=" "
    print(cadena)








# ------------
# EJERCICIO 11
# ------------
#
# 
# Supongamos que tenemos almacenada, usando diccionario, la información sobre
# el grupo de los alumnos de un curso. Para ello, usamos como clave el nombre
# de los alumnos de un grupo y como valor el grupo que tienen asignado. 

# 1) Definir una función alumnos_grupo(d) que a partir de un diccionario
# de ese tipo, devuelve otro diccionario cuyas claves son los nombres de los
# grupos y cuyo valor asignado a cada clave es la lista los alumnos que
# forman parte del grupo.

# Ejemplos:

# >>> alum={"Juan":"G1", "Rosa":"G2"  , "Joaquín":"G1"   ,"Carmen":"G2"  , 
#           "Isabel":"G1" , "Rocío":"G3" , "Bernardo":"G3", "Jesús":"G2"}
# >>> grupos=alumnos_grupo(alum)
# >>> grupos
# {'G3': ['Rocío', 'Bernardo'], 'G2': ['Jesús', 'Carmen', 'Rosa'], 
#  'G1': ['Isabel', 'Juan', 'Joaquín']}

def alumnos_grupo(d):
    dg=dict()#dict() es para crear un diccionarioal que voy a llamar dg
    for a,g in d.items():#esto me recorre las parejas del diccionario
        if g in dg:#si este vaor g es clave del diccionario dg
            dg[g].append(a)
        else:
            dg[g]=a
    return dg
        


# 2) Definir una función nuevo_alumno(dict_n,dict_g,nombre,grupo) tal que
# supuesto que dict_n y dict_g son dos variables conteniendo respectivamente
# el grupo de cada alumno y los alumnos de cada grupo, introduce un nuevo
# alumno con su nombre y grupo, modificando adecuadamente tanto dict_n como
# dict_g. Si el alumno ya está en los diccionarios, modificar el dato
# existente (en ese caso, si además el grupo que se quiere asignar no coincide
# que el que ya tiene se mostrará un mensaje de advertencia). Si se asigna un
# grupo que no está dado de alta, la correspondiente entrada se debe añadir al
# diccionario de grupos.

# Ejemplos:

# >>> nuevo_alumno(alum,grupos,"Bernardo","G3")
# Nog actualizado. El alumno Bernardo ya está dado de alta en el grupo G3
# >>> alum
# {'Isabel': 'G1', 'Jesús': 'G2', 'Rocío': 'G3', 'Juan': 'G1', 'Carmen': 'G2', 
#  'Rosa': 'G2', 'Joaquín': 'G1', 'Bernardo': 'G3'}
# >>> nuevo_alumno(alum,grupos,"Bernardo","G1")
# El alumno Bernardo ya está dado de alta. Se cambia al grupo G1
# >>> alum
# {'Isabel': 'G1', 'Jesús': 'G2', 'Rocío': 'G3', 'Juan': 'G1', 'Carmen': 'G2', 
#  'Rosa': 'G2', 'Joaquín': 'G1', 'Bernardo': 'G1'}
# >>> grupos
# {'G3': ['Rocío'], 'G2': ['Jesús', 'Carmen', 'Rosa'], 
#  'G1': ['Isabel', 'Juan', 'Joaquín', 'Bernardo']}
# >>> nuevo_alumno(alum,grupos,"Ana","G3")
# Nuevo alumno Ana. Incluido en el grupo G3
# >>> nuevo_alumno(alum,grupos,"Juan","G4")
# El alumno Juan ya está dado de alta. Se cambia al grupo G4
# >>> alum
# {'Isabel': 'G1', 'Jesús': 'G2', 'Rocío': 'G3', 'Ana': 'G3', 'Juan': 'G4', 'Carmen': 'G2', 
#  'Rosa': 'G2', 'Joaquín': 'G1', 'Bernardo': 'G1'}
# >>> grupos
# {'G4': ['Juan'], 'G3': ['Rocío', 'Ana'], 'G2': ['Jesús', 'Carmen', 'Rosa'], 
#  'G1': ['Isabel', 'Joaquín', 'Bernardo']}
# --------------------------------------------------------------------------












# ------------
# EJERCICIO 12
# ------------
#
# 
# Definir una función inversa_comp(l), que usando definición por comprensión,
# calcule la inversa de una lista dada
#
# Ejemplo:
# >>> inversa_comp(["rojo","azul","verde","amarillo","negro"])
# ['negro', 'amarillo', 'verde', 'azul', 'rojo']
# -------------------------------------------------------------------------- 











# ------------
# EJERCICIO 13
# ------------
#
# 
# Definir, usando definición de listas por comprensión, una función
# sustituye(x,y,l) que obtiene el resultado de sustituir en l todas las
# ocurrencias (a primer nivel) de x por y.

# Ejemplo:

# >>> sustituye("a","b",["q","w","a","b","a","a","c"])
# ['q', 'w', 'b', 'b', 'b', 'b', 'c']
# >>> sustituye("a","b",["q","w",["a","b"],"a","a","c"])
# ['q', 'w', ['a', 'b'], 'b', 'b', 'c']
# -----------------------------------------------------------------------










# ------------
# EJERCICIO 14
# ------------
#
# 
# Decimos que el elemento a_ij de una matriz cuadrada A es un punto de silla
# si es el máximo de los elementos de la fila i y el mínimo de los elementos
# de la columna j.  Es posible probar que una matriz cuyos elementos son
# todos distintos tiene a lo sumo un único punto de silla.  
# Definir una función silla que recibiendo como entrada una matriz A
# (representada mediante la lista de sus filas) con números distintos, 
# devuelva la tupla (i, j) tal que el elemento a_ij es un punto de silla de
# A. Devolver False si la matriz no tiene puntos de silla. 

# Ejemplos:

# >>> punto_de_silla([[1,2,3],[4,5,6],[7,8,9]])
# (0, 2)
# >>> punto_de_silla([[11,12],[14,9]])
# False
# >>> punto_de_silla([[1,4,3,2],[9,8,7,6],[5,10,11,13],[12,14,15,16]])
# (0, 1)
# -------------------------------------------------------------------------











# ------------
# EJERCICIO 15
# ------------
#
# 
# Definir la función mezcla(l1,l2) que recibe como argumentos dos listas
# numéricas ordenadas de menor a mayor y devuelve la mezcla ordenada de dichas
# listas.  Por ejemplo: 

# >>> mezcla([3,7,8,11,13],[1,4,9,10])
# [1, 3, 4, 7, 8, 9, 10, 11, 13]
# --------------------------------------------------------------------













# ------------
# EJERCICIO 16
# ------------
#
# 
# En este ejercicio vamos a "comprimir" y "descomprimir" listas.

#  Apartado (a).
#  Definir la función compresion(l) que devuelva la lista resultante de
#  comprimir la lista l que recibe como entrada, en el siguiente sentido: 
#  * Si el elemento x aparece n (n > 1) veces de manera consecutiva en l
#    sustituimos esas n ocurrencias por la tupla (n, x)
#  * Si el elemento x es distinto de sus vecinos, entonces lo dejamos
#    igual
#  Ejemplo:
 
#  >>> compresión([1, 1, 1, 2, 1, 3, 2, 4, 4, 6, 8, 8, 8])
#  [[3, 2], 1, 3, 2, 4, [2, 6], 8, [3, 8]]
#  >>> compresión(["a", "a", "a", "b", "a", "c", "b", "d", "d", "f", "h", "h", "h"])
#  [[3, 'b'], 'a', 'c', 'b', 'd', [2, 'f'], 'h', [3, 'h']]

#  Apartado (b).
#  Definir la función descompresion(l) que devuelva la lista l descomprimida,
#  suponiendo que ha sido comprimida con el método del apartado anterior.
#  Ejemplo:

#  >>> descompresión([[3, 1], 2, 1, 3, 2, [2, 4], 6, [3, 8]])
#  [1, 1, 1, 2, 1, 3, 2, 4, 4, 6, 8, 8, 8]
# ----------------------------------------------------------------------------





























